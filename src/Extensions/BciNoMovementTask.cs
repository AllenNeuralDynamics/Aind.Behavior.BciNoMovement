//----------------------
// <auto-generated>
//     Generated using the NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------


namespace BciNoMovementDataSchema.BciNoMovementTask
{
    #pragma warning disable // Disable all warnings

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Control
    {
    
        private double _baselineThreshold = 0D;
    
        private double _gain = 1D;
    
        private double? _lowPassCutOff;
    
        private double? _highPassCutOff;
    
        public Control()
        {
        }
    
        protected Control(Control other)
        {
            _baselineThreshold = other._baselineThreshold;
            _gain = other._gain;
            _lowPassCutOff = other._lowPassCutOff;
            _highPassCutOff = other._highPassCutOff;
        }
    
        /// <summary>
        /// The threshold to be applied to the signal to define baseline
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("baseline_threshold")]
        [System.ComponentModel.DescriptionAttribute("The threshold to be applied to the signal to define baseline")]
        public double BaselineThreshold
        {
            get
            {
                return _baselineThreshold;
            }
            set
            {
                _baselineThreshold = value;
            }
        }
    
        /// <summary>
        /// The gain to be applied to the signal
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("gain")]
        [System.ComponentModel.DescriptionAttribute("The gain to be applied to the signal")]
        public double Gain
        {
            get
            {
                return _gain;
            }
            set
            {
                _gain = value;
            }
        }
    
        /// <summary>
        /// Low pass cut off frequency(Hz)
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("low_pass_cut_off")]
        [System.ComponentModel.DescriptionAttribute("Low pass cut off frequency(Hz)")]
        public double? LowPassCutOff
        {
            get
            {
                return _lowPassCutOff;
            }
            set
            {
                _lowPassCutOff = value;
            }
        }
    
        /// <summary>
        /// High pass cut off frequency(Hz)
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("high_pass_cut_off")]
        [System.ComponentModel.DescriptionAttribute("High pass cut off frequency(Hz)")]
        public double? HighPassCutOff
        {
            get
            {
                return _highPassCutOff;
            }
            set
            {
                _highPassCutOff = value;
            }
        }
    
        public System.IObservable<Control> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Control(this)));
        }
    
        public System.IObservable<Control> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Control(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("baseline_threshold = " + _baselineThreshold + ", ");
            stringBuilder.Append("gain = " + _gain + ", ");
            stringBuilder.Append("low_pass_cut_off = " + _lowPassCutOff + ", ");
            stringBuilder.Append("high_pass_cut_off = " + _highPassCutOff);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Point3d
    {
    
        private double _x = 0D;
    
        private double _y = 0D;
    
        private double _z = 0D;
    
        public Point3d()
        {
        }
    
        protected Point3d(Point3d other)
        {
            _x = other._x;
            _y = other._y;
            _z = other._z;
        }
    
        /// <summary>
        /// X coordinate
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("x")]
        [System.ComponentModel.DescriptionAttribute("X coordinate")]
        public double X
        {
            get
            {
                return _x;
            }
            set
            {
                _x = value;
            }
        }
    
        /// <summary>
        /// Y coordinate
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("y")]
        [System.ComponentModel.DescriptionAttribute("Y coordinate")]
        public double Y
        {
            get
            {
                return _y;
            }
            set
            {
                _y = value;
            }
        }
    
        /// <summary>
        /// Z coordinate
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("z")]
        [System.ComponentModel.DescriptionAttribute("Z coordinate")]
        public double Z
        {
            get
            {
                return _z;
            }
            set
            {
                _z = value;
            }
        }
    
        public System.IObservable<Point3d> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Point3d(this)));
        }
    
        public System.IObservable<Point3d> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Point3d(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("x = " + _x + ", ");
            stringBuilder.Append("y = " + _y + ", ");
            stringBuilder.Append("z = " + _z);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class BciNoMovementTaskLogic
    {
    
        private string _describedBy;
    
        private string _schemaVersion;
    
        private double _valveOpenTime = 0.01D;
    
        private double _waitMicroscopeTime = 0D;
    
        private double _lowActivityTime = 1D;
    
        private double _lickResponseTime = 2D;
    
        private bool _waitForLick = true;
    
        private bool _enableSoundOnRewardZoneEntry = true;
    
        private double _noMovementTimeBeforeTrial = 0D;
    
        private double _interTrialInterval = 0D;
    
        private double _rewardConsumeTime = 2D;
    
        private double _maxTrialDuration = 20D;
    
        private double _farPositionOffset = 8D;
    
        private Point3d _manipulatorResetPosition;
    
        private Control _bciPassiveControl;
    
        private Control _noMovementPassiveControl;
    
        private Control _bciActiveControl;
    
        private bool _skip2pHandshake = false;
    
        private double _punishOnMovementDuration = 0D;
    
        public BciNoMovementTaskLogic()
        {
        }
    
        protected BciNoMovementTaskLogic(BciNoMovementTaskLogic other)
        {
            _describedBy = other._describedBy;
            _schemaVersion = other._schemaVersion;
            _valveOpenTime = other._valveOpenTime;
            _waitMicroscopeTime = other._waitMicroscopeTime;
            _lowActivityTime = other._lowActivityTime;
            _lickResponseTime = other._lickResponseTime;
            _waitForLick = other._waitForLick;
            _enableSoundOnRewardZoneEntry = other._enableSoundOnRewardZoneEntry;
            _noMovementTimeBeforeTrial = other._noMovementTimeBeforeTrial;
            _interTrialInterval = other._interTrialInterval;
            _rewardConsumeTime = other._rewardConsumeTime;
            _maxTrialDuration = other._maxTrialDuration;
            _farPositionOffset = other._farPositionOffset;
            _manipulatorResetPosition = other._manipulatorResetPosition;
            _bciPassiveControl = other._bciPassiveControl;
            _noMovementPassiveControl = other._noMovementPassiveControl;
            _bciActiveControl = other._bciActiveControl;
            _skip2pHandshake = other._skip2pHandshake;
            _punishOnMovementDuration = other._punishOnMovementDuration;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("describedBy", Required=Newtonsoft.Json.Required.Always)]
        public string DescribedBy
        {
            get
            {
                return _describedBy;
            }
            set
            {
                _describedBy = value;
            }
        }
    
        /// <summary>
        /// schema version
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("schema_version", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("schema version")]
        public string SchemaVersion
        {
            get
            {
                return _schemaVersion;
            }
            set
            {
                _schemaVersion = value;
            }
        }
    
        /// <summary>
        /// Time valve remains open (s)
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("valve_open_time")]
        [System.ComponentModel.DescriptionAttribute("Time valve remains open (s)")]
        public double ValveOpenTime
        {
            get
            {
                return _valveOpenTime;
            }
            set
            {
                _valveOpenTime = value;
            }
        }
    
        /// <summary>
        /// Interval (s) after the animal successfully exists the quiescence period.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("wait_microscope_time")]
        [System.ComponentModel.DescriptionAttribute("Interval (s) after the animal successfully exists the quiescence period.")]
        public double WaitMicroscopeTime
        {
            get
            {
                return _waitMicroscopeTime;
            }
            set
            {
                _waitMicroscopeTime = value;
            }
        }
    
        /// <summary>
        /// Duration (s) BCI activity must stay low before starting a new trial.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("low_activity_time")]
        [System.ComponentModel.DescriptionAttribute("Duration (s) BCI activity must stay low before starting a new trial.")]
        public double LowActivityTime
        {
            get
            {
                return _lowActivityTime;
            }
            set
            {
                _lowActivityTime = value;
            }
        }
    
        /// <summary>
        /// Interval (s) for the animal to collect reward. Only applies if waitForLick is true.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("lick_response_time")]
        [System.ComponentModel.DescriptionAttribute("Interval (s) for the animal to collect reward. Only applies if waitForLick is tru" +
            "e.")]
        public double LickResponseTime
        {
            get
            {
                return _lickResponseTime;
            }
            set
            {
                _lickResponseTime = value;
            }
        }
    
        /// <summary>
        /// Determines whether the animal must lick to trigger reward delivery. If false, reward is immediately delivered.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("wait_for_lick")]
        [System.ComponentModel.DescriptionAttribute("Determines whether the animal must lick to trigger reward delivery. If false, rew" +
            "ard is immediately delivered.")]
        public bool WaitForLick
        {
            get
            {
                return _waitForLick;
            }
            set
            {
                _waitForLick = value;
            }
        }
    
        /// <summary>
        /// Enables audio feedback on reward zone entry.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("enable_sound_on_reward_zone_entry")]
        [System.ComponentModel.DescriptionAttribute("Enables audio feedback on reward zone entry.")]
        public bool EnableSoundOnRewardZoneEntry
        {
            get
            {
                return _enableSoundOnRewardZoneEntry;
            }
            set
            {
                _enableSoundOnRewardZoneEntry = value;
            }
        }
    
        /// <summary>
        /// Interval (s) subjects must not move for to start a new trial.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("no_movement_time_before_trial")]
        [System.ComponentModel.DescriptionAttribute("Interval (s) subjects must not move for to start a new trial.")]
        public double NoMovementTimeBeforeTrial
        {
            get
            {
                return _noMovementTimeBeforeTrial;
            }
            set
            {
                _noMovementTimeBeforeTrial = value;
            }
        }
    
        /// <summary>
        /// Interval (s) between trials.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("inter_trial_interval")]
        [System.ComponentModel.DescriptionAttribute("Interval (s) between trials.")]
        public double InterTrialInterval
        {
            get
            {
                return _interTrialInterval;
            }
            set
            {
                _interTrialInterval = value;
            }
        }
    
        /// <summary>
        /// Duration (s) for the animal to consume reward.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("reward_consume_time")]
        [System.ComponentModel.DescriptionAttribute("Duration (s) for the animal to consume reward.")]
        public double RewardConsumeTime
        {
            get
            {
                return _rewardConsumeTime;
            }
            set
            {
                _rewardConsumeTime = value;
            }
        }
    
        /// <summary>
        /// Maximum duration (s) of a trial.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("max_trial_duration")]
        [System.ComponentModel.DescriptionAttribute("Maximum duration (s) of a trial.")]
        public double MaxTrialDuration
        {
            get
            {
                return _maxTrialDuration;
            }
            set
            {
                _maxTrialDuration = value;
            }
        }
    
        /// <summary>
        /// Offset (mm) from the close position to the far position.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("far_position_offset")]
        [System.ComponentModel.DescriptionAttribute("Offset (mm) from the close position to the far position.")]
        public double FarPositionOffset
        {
            get
            {
                return _farPositionOffset;
            }
            set
            {
                _farPositionOffset = value;
            }
        }
    
        /// <summary>
        /// Position (mm) to reset the manipulator to.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("manipulator_reset_position")]
        [System.ComponentModel.DescriptionAttribute("Position (mm) to reset the manipulator to.")]
        public Point3d ManipulatorResetPosition
        {
            get
            {
                return _manipulatorResetPosition;
            }
            set
            {
                _manipulatorResetPosition = value;
            }
        }
    
        /// <summary>
        /// BCI control parameters
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("bci_passive_control")]
        [System.ComponentModel.DescriptionAttribute("BCI control parameters")]
        public Control BciPassiveControl
        {
            get
            {
                return _bciPassiveControl;
            }
            set
            {
                _bciPassiveControl = value;
            }
        }
    
        /// <summary>
        /// No movement control parameters
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("no_movement_passive_control")]
        [System.ComponentModel.DescriptionAttribute("No movement control parameters")]
        public Control NoMovementPassiveControl
        {
            get
            {
                return _noMovementPassiveControl;
            }
            set
            {
                _noMovementPassiveControl = value;
            }
        }
    
        /// <summary>
        /// BCI active control parameters
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("bci_active_control")]
        [System.ComponentModel.DescriptionAttribute("BCI active control parameters")]
        public Control BciActiveControl
        {
            get
            {
                return _bciActiveControl;
            }
            set
            {
                _bciActiveControl = value;
            }
        }
    
        /// <summary>
        /// Skip 2p handshake
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("skip_2p_handshake")]
        [System.ComponentModel.DescriptionAttribute("Skip 2p handshake")]
        public bool Skip2pHandshake
        {
            get
            {
                return _skip2pHandshake;
            }
            set
            {
                _skip2pHandshake = value;
            }
        }
    
        /// <summary>
        /// The duration (s) that the spout will stop updating if the animal moves during the trial.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("punish_on_movement_duration")]
        [System.ComponentModel.DescriptionAttribute("The duration (s) that the spout will stop updating if the animal moves during the" +
            " trial.")]
        public double PunishOnMovementDuration
        {
            get
            {
                return _punishOnMovementDuration;
            }
            set
            {
                _punishOnMovementDuration = value;
            }
        }
    
        public System.IObservable<BciNoMovementTaskLogic> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new BciNoMovementTaskLogic(this)));
        }
    
        public System.IObservable<BciNoMovementTaskLogic> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new BciNoMovementTaskLogic(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("describedBy = " + _describedBy + ", ");
            stringBuilder.Append("schema_version = " + _schemaVersion + ", ");
            stringBuilder.Append("valve_open_time = " + _valveOpenTime + ", ");
            stringBuilder.Append("wait_microscope_time = " + _waitMicroscopeTime + ", ");
            stringBuilder.Append("low_activity_time = " + _lowActivityTime + ", ");
            stringBuilder.Append("lick_response_time = " + _lickResponseTime + ", ");
            stringBuilder.Append("wait_for_lick = " + _waitForLick + ", ");
            stringBuilder.Append("enable_sound_on_reward_zone_entry = " + _enableSoundOnRewardZoneEntry + ", ");
            stringBuilder.Append("no_movement_time_before_trial = " + _noMovementTimeBeforeTrial + ", ");
            stringBuilder.Append("inter_trial_interval = " + _interTrialInterval + ", ");
            stringBuilder.Append("reward_consume_time = " + _rewardConsumeTime + ", ");
            stringBuilder.Append("max_trial_duration = " + _maxTrialDuration + ", ");
            stringBuilder.Append("far_position_offset = " + _farPositionOffset + ", ");
            stringBuilder.Append("manipulator_reset_position = " + _manipulatorResetPosition + ", ");
            stringBuilder.Append("bci_passive_control = " + _bciPassiveControl + ", ");
            stringBuilder.Append("no_movement_passive_control = " + _noMovementPassiveControl + ", ");
            stringBuilder.Append("bci_active_control = " + _bciActiveControl + ", ");
            stringBuilder.Append("skip_2p_handshake = " + _skip2pHandshake + ", ");
            stringBuilder.Append("punish_on_movement_duration = " + _punishOnMovementDuration);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Serializes a sequence of data model objects into JSON strings.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Serializes a sequence of data model objects into JSON strings.")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    public partial class SerializeToJson
    {
    
        private System.IObservable<string> Process<T>(System.IObservable<T> source)
        {
            return System.Reactive.Linq.Observable.Select(source, value => Newtonsoft.Json.JsonConvert.SerializeObject(value));
        }

        public System.IObservable<string> Process(System.IObservable<Control> source)
        {
            return Process<Control>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Point3d> source)
        {
            return Process<Point3d>(source);
        }

        public System.IObservable<string> Process(System.IObservable<BciNoMovementTaskLogic> source)
        {
            return Process<BciNoMovementTaskLogic>(source);
        }
    }


    /// <summary>
    /// Deserializes a sequence of JSON strings into data model objects.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Deserializes a sequence of JSON strings into data model objects.")]
    [System.ComponentModel.DefaultPropertyAttribute("Type")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Control>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Point3d>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<BciNoMovementTaskLogic>))]
    public partial class DeserializeFromJson : Bonsai.Expressions.SingleArgumentExpressionBuilder
    {
    
        public DeserializeFromJson()
        {
            Type = new Bonsai.Expressions.TypeMapping<BciNoMovementTaskLogic>();
        }

        public Bonsai.Expressions.TypeMapping Type { get; set; }

        public override System.Linq.Expressions.Expression Build(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments)
        {
            var typeMapping = (Bonsai.Expressions.TypeMapping)Type;
            var returnType = typeMapping.GetType().GetGenericArguments()[0];
            return System.Linq.Expressions.Expression.Call(
                typeof(DeserializeFromJson),
                "Process",
                new System.Type[] { returnType },
                System.Linq.Enumerable.Single(arguments));
        }

        private static System.IObservable<T> Process<T>(System.IObservable<string> source)
        {
            return System.Reactive.Linq.Observable.Select(source, value => Newtonsoft.Json.JsonConvert.DeserializeObject<T>(value));
        }
    }
}