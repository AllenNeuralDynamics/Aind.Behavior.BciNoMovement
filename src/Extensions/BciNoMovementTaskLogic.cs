//----------------------
// <auto-generated>
//     Generated using the NJsonSchema v10.9.0.0 (Newtonsoft.Json v9.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------


namespace BciNoMovementDataSchema.TaskLogic
{
    #pragma warning disable // Disable all warnings

    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class BciNoMovementTaskLogic
    {
    
        private double _valveOpenTime = 0.1D;
    
        private double _lowActivityTime = 1D;
    
        private double _lickResponseTime = 2D;
    
        private bool _waitForLick = true;
    
        private bool _enableSoundOnRewardZoneEntry = true;
    
        private bool _enableAutoWater = true;
    
        private double _autoWaterTimeMultiplier = 0.5D;
    
        private double _quiescenceTime = 0D;
    
        private double _interTrialInterval = 0.5D;
    
        private double _neuronResponseTime = 20D;
    
        private double _rewardConsumeTime = 2D;
    
        /// <summary>
        /// Time in seconds to open the valve for reward delivery
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("valveOpenTime")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="valveOpenTime")]
        [System.ComponentModel.DescriptionAttribute("Time in seconds to open the valve for reward delivery")]
        public double ValveOpenTime
        {
            get
            {
                return _valveOpenTime;
            }
            set
            {
                _valveOpenTime = value;
            }
        }
    
        /// <summary>
        /// Time in seconds to wait for the bci activity to be low
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("lowActivityTime")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="lowActivityTime")]
        [System.ComponentModel.DescriptionAttribute("Time in seconds to wait for the bci activity to be low")]
        public double LowActivityTime
        {
            get
            {
                return _lowActivityTime;
            }
            set
            {
                _lowActivityTime = value;
            }
        }
    
        /// <summary>
        /// Time in seconds to wait for the animal to collect reward
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("lickResponseTime")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="lickResponseTime")]
        [System.ComponentModel.DescriptionAttribute("Time in seconds to wait for the animal to collect reward")]
        public double LickResponseTime
        {
            get
            {
                return _lickResponseTime;
            }
            set
            {
                _lickResponseTime = value;
            }
        }
    
        /// <summary>
        /// Wait for the animal to lick before delivering reward
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("waitForLick")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="waitForLick")]
        [System.ComponentModel.DescriptionAttribute("Wait for the animal to lick before delivering reward")]
        public bool WaitForLick
        {
            get
            {
                return _waitForLick;
            }
            set
            {
                _waitForLick = value;
            }
        }
    
        /// <summary>
        /// Enables sound on reward zone entry
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("enableSoundOnRewardZoneEntry")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="enableSoundOnRewardZoneEntry")]
        [System.ComponentModel.DescriptionAttribute("Enables sound on reward zone entry")]
        public bool EnableSoundOnRewardZoneEntry
        {
            get
            {
                return _enableSoundOnRewardZoneEntry;
            }
            set
            {
                _enableSoundOnRewardZoneEntry = value;
            }
        }
    
        /// <summary>
        /// Enables AutoWater mode.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("enableAutoWater")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="enableAutoWater")]
        [System.ComponentModel.DescriptionAttribute("Enables AutoWater mode.")]
        public bool EnableAutoWater
        {
            get
            {
                return _enableAutoWater;
            }
            set
            {
                _enableAutoWater = value;
            }
        }
    
        /// <summary>
        /// Multiplier for the AutoWater mode.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("autoWaterTimeMultiplier")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="autoWaterTimeMultiplier")]
        [System.ComponentModel.DescriptionAttribute("Multiplier for the AutoWater mode.")]
        public double AutoWaterTimeMultiplier
        {
            get
            {
                return _autoWaterTimeMultiplier;
            }
            set
            {
                _autoWaterTimeMultiplier = value;
            }
        }
    
        /// <summary>
        /// Time in seconds to wait for the animal to stop moving
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("quiescenceTime")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="quiescenceTime")]
        [System.ComponentModel.DescriptionAttribute("Time in seconds to wait for the animal to stop moving")]
        public double QuiescenceTime
        {
            get
            {
                return _quiescenceTime;
            }
            set
            {
                _quiescenceTime = value;
            }
        }
    
        /// <summary>
        /// Time in seconds between trials
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("interTrialInterval")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="interTrialInterval")]
        [System.ComponentModel.DescriptionAttribute("Time in seconds between trials")]
        public double InterTrialInterval
        {
            get
            {
                return _interTrialInterval;
            }
            set
            {
                _interTrialInterval = value;
            }
        }
    
        /// <summary>
        /// Time in seconds to wait for the BCI signal to complete the trial
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("neuronResponseTime")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="neuronResponseTime")]
        [System.ComponentModel.DescriptionAttribute("Time in seconds to wait for the BCI signal to complete the trial")]
        public double NeuronResponseTime
        {
            get
            {
                return _neuronResponseTime;
            }
            set
            {
                _neuronResponseTime = value;
            }
        }
    
        /// <summary>
        /// Time in seconds to wait for the animal to consume the reward
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("rewardConsumeTime")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="rewardConsumeTime")]
        [System.ComponentModel.DescriptionAttribute("Time in seconds to wait for the animal to consume the reward")]
        public double RewardConsumeTime
        {
            get
            {
                return _rewardConsumeTime;
            }
            set
            {
                _rewardConsumeTime = value;
            }
        }
    
        public System.IObservable<BciNoMovementTaskLogic> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new BciNoMovementTaskLogic
                {
                    ValveOpenTime = _valveOpenTime,
                    LowActivityTime = _lowActivityTime,
                    LickResponseTime = _lickResponseTime,
                    WaitForLick = _waitForLick,
                    EnableSoundOnRewardZoneEntry = _enableSoundOnRewardZoneEntry,
                    EnableAutoWater = _enableAutoWater,
                    AutoWaterTimeMultiplier = _autoWaterTimeMultiplier,
                    QuiescenceTime = _quiescenceTime,
                    InterTrialInterval = _interTrialInterval,
                    NeuronResponseTime = _neuronResponseTime,
                    RewardConsumeTime = _rewardConsumeTime
                }));
        }
    }


    /// <summary>
    /// Serializes a sequence of data model objects into JSON strings.
    /// </summary>
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    [System.ComponentModel.DescriptionAttribute("Serializes a sequence of data model objects into JSON strings.")]
    public partial class SerializeToJson
    {
    
        private System.IObservable<string> Process<T>(System.IObservable<T> source)
        {
            return System.Reactive.Linq.Observable.Select(source, value => Newtonsoft.Json.JsonConvert.SerializeObject(value));
        }

        public System.IObservable<string> Process(System.IObservable<BciNoMovementTaskLogic> source)
        {
            return Process<BciNoMovementTaskLogic>(source);
        }
    }


    /// <summary>
    /// Deserializes a sequence of JSON strings into data model objects.
    /// </summary>
    [System.ComponentModel.DefaultPropertyAttribute("Type")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<BciNoMovementTaskLogic>))]
    [System.ComponentModel.DescriptionAttribute("Deserializes a sequence of JSON strings into data model objects.")]
    public partial class DeserializeFromJson : Bonsai.Expressions.SingleArgumentExpressionBuilder
    {
    
        public DeserializeFromJson()
        {
            Type = new Bonsai.Expressions.TypeMapping<BciNoMovementTaskLogic>();
        }

        public Bonsai.Expressions.TypeMapping Type { get; set; }

        public override System.Linq.Expressions.Expression Build(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments)
        {
            var typeMapping = (Bonsai.Expressions.TypeMapping)Type;
            var returnType = typeMapping.GetType().GetGenericArguments()[0];
            return System.Linq.Expressions.Expression.Call(
                typeof(DeserializeFromJson),
                "Process",
                new System.Type[] { returnType },
                System.Linq.Enumerable.Single(arguments));
        }

        private static System.IObservable<T> Process<T>(System.IObservable<string> source)
        {
            return System.Reactive.Linq.Observable.Select(source, value => Newtonsoft.Json.JsonConvert.DeserializeObject<T>(value));
        }
    }


    /// <summary>
    /// Serializes a sequence of data model objects into YAML strings.
    /// </summary>
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    [System.ComponentModel.DescriptionAttribute("Serializes a sequence of data model objects into YAML strings.")]
    public partial class SerializeToYaml
    {
    
        private System.IObservable<string> Process<T>(System.IObservable<T> source)
        {
            return System.Reactive.Linq.Observable.Defer(() =>
            {
                var serializer = new YamlDotNet.Serialization.SerializerBuilder().Build();
                return System.Reactive.Linq.Observable.Select(source, value => serializer.Serialize(value)); 
            });
        }

        public System.IObservable<string> Process(System.IObservable<BciNoMovementTaskLogic> source)
        {
            return Process<BciNoMovementTaskLogic>(source);
        }
    }


    /// <summary>
    /// Deserializes a sequence of YAML strings into data model objects.
    /// </summary>
    [System.ComponentModel.DefaultPropertyAttribute("Type")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<BciNoMovementTaskLogic>))]
    [System.ComponentModel.DescriptionAttribute("Deserializes a sequence of YAML strings into data model objects.")]
    public partial class DeserializeFromYaml : Bonsai.Expressions.SingleArgumentExpressionBuilder
    {
    
        public DeserializeFromYaml()
        {
            Type = new Bonsai.Expressions.TypeMapping<BciNoMovementTaskLogic>();
        }

        public Bonsai.Expressions.TypeMapping Type { get; set; }

        public override System.Linq.Expressions.Expression Build(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments)
        {
            var typeMapping = (Bonsai.Expressions.TypeMapping)Type;
            var returnType = typeMapping.GetType().GetGenericArguments()[0];
            return System.Linq.Expressions.Expression.Call(
                typeof(DeserializeFromYaml),
                "Process",
                new System.Type[] { returnType },
                System.Linq.Enumerable.Single(arguments));
        }

        private static System.IObservable<T> Process<T>(System.IObservable<string> source)
        {
            return System.Reactive.Linq.Observable.Defer(() =>
            {
                var serializer = new YamlDotNet.Serialization.DeserializerBuilder().Build();
                return System.Reactive.Linq.Observable.Select(source, value =>
                {
                    var reader = new System.IO.StringReader(value);
                    var parser = new YamlDotNet.Core.MergingParser(new YamlDotNet.Core.Parser(reader));
                    return serializer.Deserialize<T>(parser);
                });
            });
        }
    }
}