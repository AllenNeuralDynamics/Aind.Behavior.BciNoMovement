//----------------------
// <auto-generated>
//     Generated using the NJsonSchema v10.9.0.0 (Newtonsoft.Json v9.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------


namespace BciNoMovementDataSchema.Rig
{
    #pragma warning disable // Disable all warnings

    public enum Axis
    {
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="1")]
        _1 = 1,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="2")]
        _2 = 2,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="3")]
        _3 = 3,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="0")]
        _0 = 0,
    }


    public enum ColorProcessing
    {
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="Default")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="Default")]
        Default = 0,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="NoColorProcessing")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="NoColorProcessing")]
        NoColorProcessing = 1,
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class HarpBoard
    {
    
        private string _portName;
    
        private string _serialNumber;
    
        private string _deviceName;
    
        [Newtonsoft.Json.JsonPropertyAttribute("portName", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="portName")]
        public string PortName
        {
            get
            {
                return _portName;
            }
            set
            {
                _portName = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("serialNumber")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="serialNumber")]
        public string SerialNumber
        {
            get
            {
                return _serialNumber;
            }
            set
            {
                _serialNumber = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("deviceName")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="deviceName")]
        public string DeviceName
        {
            get
            {
                return _deviceName;
            }
            set
            {
                _deviceName = value;
            }
        }
    
        public System.IObservable<HarpBoard> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new HarpBoard
                {
                    PortName = _portName,
                    SerialNumber = _serialNumber,
                    DeviceName = _deviceName
                }));
        }
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Networking
    {
    
        private ZmqConnection _zmqPublisher;
    
        private ZmqConnection _zmqSubscriber;
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("zmqPublisher")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="zmqPublisher")]
        public ZmqConnection ZmqPublisher
        {
            get
            {
                return _zmqPublisher;
            }
            set
            {
                _zmqPublisher = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("zmqSubscriber")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="zmqSubscriber")]
        public ZmqConnection ZmqSubscriber
        {
            get
            {
                return _zmqSubscriber;
            }
            set
            {
                _zmqSubscriber = value;
            }
        }
    
        public System.IObservable<Networking> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new Networking
                {
                    ZmqPublisher = _zmqPublisher,
                    ZmqSubscriber = _zmqSubscriber
                }));
        }
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Operation
    {
    
        private System.Collections.Generic.List<int> _loadCellOffset = new System.Collections.Generic.List<int>();
    
        private int _loadCellIndex = 0;
    
        /// <summary>
        /// Bias offset of a specific loadcell channel.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("loadCellOffset")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="loadCellOffset")]
        [System.ComponentModel.DescriptionAttribute("Bias offset of a specific loadcell channel.")]
        public System.Collections.Generic.List<int> LoadCellOffset
        {
            get
            {
                return _loadCellOffset;
            }
            set
            {
                _loadCellOffset = value;
            }
        }
    
        /// <summary>
        /// Index of the loadcell channel to use.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("loadCellIndex")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="loadCellIndex")]
        [System.ComponentModel.DescriptionAttribute("Index of the loadcell channel to use.")]
        public int LoadCellIndex
        {
            get
            {
                return _loadCellIndex;
            }
            set
            {
                _loadCellIndex = value;
            }
        }
    
        public System.IObservable<Operation> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new Operation
                {
                    LoadCellOffset = _loadCellOffset,
                    LoadCellIndex = _loadCellIndex
                }));
        }
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class SpinnakerCamera
    {
    
        private string _serialNumber;
    
        private int _binning = 1;
    
        private ColorProcessing _colorProcessing = BciNoMovementDataSchema.Rig.ColorProcessing.Default;
    
        private int _exposure = 1000;
    
        private int _frameRate = 60;
    
        private double _gain = 0D;
    
        [Newtonsoft.Json.JsonPropertyAttribute("serialNumber", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="serialNumber")]
        public string SerialNumber
        {
            get
            {
                return _serialNumber;
            }
            set
            {
                _serialNumber = value;
            }
        }
    
        /// <summary>
        /// Binning factor.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("binning")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="binning")]
        [System.ComponentModel.DescriptionAttribute("Binning factor.")]
        public int Binning
        {
            get
            {
                return _binning;
            }
            set
            {
                _binning = value;
            }
        }
    
        /// <summary>
        /// Color processing.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("colorProcessing", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="colorProcessing")]
        [System.ComponentModel.DescriptionAttribute("Color processing.")]
        public ColorProcessing ColorProcessing
        {
            get
            {
                return _colorProcessing;
            }
            set
            {
                _colorProcessing = value;
            }
        }
    
        /// <summary>
        /// Exposure time (us).
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("exposure")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="exposure")]
        [System.ComponentModel.DescriptionAttribute("Exposure time (us).")]
        public int Exposure
        {
            get
            {
                return _exposure;
            }
            set
            {
                _exposure = value;
            }
        }
    
        /// <summary>
        /// Frame rate (Hz).
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("frameRate")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="frameRate")]
        [System.ComponentModel.DescriptionAttribute("Frame rate (Hz).")]
        public int FrameRate
        {
            get
            {
                return _frameRate;
            }
            set
            {
                _frameRate = value;
            }
        }
    
        /// <summary>
        /// Gain (dB).
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("gain")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="gain")]
        [System.ComponentModel.DescriptionAttribute("Gain (dB).")]
        public double Gain
        {
            get
            {
                return _gain;
            }
            set
            {
                _gain = value;
            }
        }
    
        public System.IObservable<SpinnakerCamera> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new SpinnakerCamera
                {
                    SerialNumber = _serialNumber,
                    Binning = _binning,
                    ColorProcessing = _colorProcessing,
                    Exposure = _exposure,
                    FrameRate = _frameRate,
                    Gain = _gain
                }));
        }
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class ZaberAxis
    {
    
        private int _deviceIndex;
    
        private int _axisIndex;
    
        /// <summary>
        /// Device number.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("deviceIndex", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="deviceIndex")]
        [System.ComponentModel.DescriptionAttribute("Device number.")]
        public int DeviceIndex
        {
            get
            {
                return _deviceIndex;
            }
            set
            {
                _deviceIndex = value;
            }
        }
    
        /// <summary>
        /// Motor to send the instruction to.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("axisIndex", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="axisIndex")]
        [System.ComponentModel.DescriptionAttribute("Motor to send the instruction to.")]
        public int AxisIndex
        {
            get
            {
                return _axisIndex;
            }
            set
            {
                _axisIndex = value;
            }
        }
    
        public System.IObservable<ZaberAxis> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new ZaberAxis
                {
                    DeviceIndex = _deviceIndex,
                    AxisIndex = _axisIndex
                }));
        }
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class ZaberGenericCommand
    {
    
        private string _command;
    
        private int _axis = 0;
    
        private int _device;
    
        [Newtonsoft.Json.JsonPropertyAttribute("command", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="command")]
        public string Command
        {
            get
            {
                return _command;
            }
            set
            {
                _command = value;
            }
        }
    
        /// <summary>
        /// Motor to send the instruction to.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("axis")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="axis")]
        [System.ComponentModel.DescriptionAttribute("Motor to send the instruction to.")]
        public int Axis
        {
            get
            {
                return _axis;
            }
            set
            {
                _axis = value;
            }
        }
    
        /// <summary>
        /// Device number.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("device")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="device")]
        [System.ComponentModel.DescriptionAttribute("Device number.")]
        public int Device
        {
            get
            {
                return _device;
            }
            set
            {
                _device = value;
            }
        }
    
        public System.IObservable<ZaberGenericCommand> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new ZaberGenericCommand
                {
                    Command = _command,
                    Axis = _axis,
                    Device = _device
                }));
        }
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class ZaberManipulator
    {
    
        private string _comPort = "COM1";
    
        private System.Collections.Generic.List<ZaberGenericCommand> _genericCommands = new System.Collections.Generic.List<ZaberGenericCommand>();
    
        private Axis _spoutAxis = BciNoMovementDataSchema.Rig.Axis._1;
    
        private double _velocity = 10D;
    
        private double _acceleration = 1299.63D;
    
        private ZaberAxis _xAxis = new ZaberAxis();
    
        private ZaberAxis _yAxis = new ZaberAxis();
    
        private ZaberAxis _zAxis = new ZaberAxis();
    
        /// <summary>
        /// COM port of the manipulator.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("comPort")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="comPort")]
        [System.ComponentModel.DescriptionAttribute("COM port of the manipulator.")]
        public string ComPort
        {
            get
            {
                return _comPort;
            }
            set
            {
                _comPort = value;
            }
        }
    
        /// <summary>
        /// List of generic commands to send to the manipulator.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("genericCommands")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="genericCommands")]
        [System.ComponentModel.DescriptionAttribute("List of generic commands to send to the manipulator.")]
        public System.Collections.Generic.List<ZaberGenericCommand> GenericCommands
        {
            get
            {
                return _genericCommands;
            }
            set
            {
                _genericCommands = value;
            }
        }
    
        /// <summary>
        /// Axis of the spout.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("spoutAxis")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="spoutAxis")]
        [System.ComponentModel.DescriptionAttribute("Axis of the spout.")]
        public Axis SpoutAxis
        {
            get
            {
                return _spoutAxis;
            }
            set
            {
                _spoutAxis = value;
            }
        }
    
        /// <summary>
        /// Maximum speed of the manipulator.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("velocity")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="velocity")]
        [System.ComponentModel.DescriptionAttribute("Maximum speed of the manipulator.")]
        public double Velocity
        {
            get
            {
                return _velocity;
            }
            set
            {
                _velocity = value;
            }
        }
    
        /// <summary>
        /// Acceleration of the manipulator.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("acceleration")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="acceleration")]
        [System.ComponentModel.DescriptionAttribute("Acceleration of the manipulator.")]
        public double Acceleration
        {
            get
            {
                return _acceleration;
            }
            set
            {
                _acceleration = value;
            }
        }
    
        /// <summary>
        /// X-axis mapping.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("xAxis", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="xAxis")]
        [System.ComponentModel.DescriptionAttribute("X-axis mapping.")]
        public ZaberAxis XAxis
        {
            get
            {
                return _xAxis;
            }
            set
            {
                _xAxis = value;
            }
        }
    
        /// <summary>
        /// Y-axis mapping.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("yAxis", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="yAxis")]
        [System.ComponentModel.DescriptionAttribute("Y-axis mapping.")]
        public ZaberAxis YAxis
        {
            get
            {
                return _yAxis;
            }
            set
            {
                _yAxis = value;
            }
        }
    
        /// <summary>
        /// Z-axis mapping.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("zAxis", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="zAxis")]
        [System.ComponentModel.DescriptionAttribute("Z-axis mapping.")]
        public ZaberAxis ZAxis
        {
            get
            {
                return _zAxis;
            }
            set
            {
                _zAxis = value;
            }
        }
    
        public System.IObservable<ZaberManipulator> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new ZaberManipulator
                {
                    ComPort = _comPort,
                    GenericCommands = _genericCommands,
                    SpoutAxis = _spoutAxis,
                    Velocity = _velocity,
                    Acceleration = _acceleration,
                    XAxis = _xAxis,
                    YAxis = _yAxis,
                    ZAxis = _zAxis
                }));
        }
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class ZmqConnection
    {
    
        private string _connectionString = "@tcp://localhost:5556";
    
        private string _topic = "";
    
        [Newtonsoft.Json.JsonPropertyAttribute("connectionString")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="connectionString")]
        public string ConnectionString
        {
            get
            {
                return _connectionString;
            }
            set
            {
                _connectionString = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("topic")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="topic")]
        public string Topic
        {
            get
            {
                return _topic;
            }
            set
            {
                _topic = value;
            }
        }
    
        public System.IObservable<ZmqConnection> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new ZmqConnection
                {
                    ConnectionString = _connectionString,
                    Topic = _topic
                }));
        }
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class BciNoMovementRig
    {
    
        private string _describedBy;
    
        private string _schema_version;
    
        private HarpBoard _harpBehaviorBoard = new HarpBoard();
    
        private HarpBoard _harpLoadCellsBoard = new HarpBoard();
    
        private HarpBoard _harpTimestampGeneratorGen3 = new HarpBoard();
    
        private SpinnakerCamera _camera0 = new SpinnakerCamera();
    
        private SpinnakerCamera _camera1;
    
        private ZaberManipulator _zaberManipulator = new ZaberManipulator();
    
        private Networking _networking;
    
        private Operation _operation;
    
        [Newtonsoft.Json.JsonPropertyAttribute("describedBy", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="describedBy")]
        public string DescribedBy
        {
            get
            {
                return _describedBy;
            }
            set
            {
                _describedBy = value;
            }
        }
    
        /// <summary>
        /// schema version
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("schema_version", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="schema_version")]
        [System.ComponentModel.DescriptionAttribute("schema version")]
        public string Schema_version
        {
            get
            {
                return _schema_version;
            }
            set
            {
                _schema_version = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("harpBehaviorBoard", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="harpBehaviorBoard")]
        public HarpBoard HarpBehaviorBoard
        {
            get
            {
                return _harpBehaviorBoard;
            }
            set
            {
                _harpBehaviorBoard = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("harpLoadCellsBoard", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="harpLoadCellsBoard")]
        public HarpBoard HarpLoadCellsBoard
        {
            get
            {
                return _harpLoadCellsBoard;
            }
            set
            {
                _harpLoadCellsBoard = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("harpTimestampGeneratorGen3", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="harpTimestampGeneratorGen3")]
        public HarpBoard HarpTimestampGeneratorGen3
        {
            get
            {
                return _harpTimestampGeneratorGen3;
            }
            set
            {
                _harpTimestampGeneratorGen3 = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("camera0", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="camera0")]
        public SpinnakerCamera Camera0
        {
            get
            {
                return _camera0;
            }
            set
            {
                _camera0 = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("camera1")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="camera1")]
        public SpinnakerCamera Camera1
        {
            get
            {
                return _camera1;
            }
            set
            {
                _camera1 = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("zaberManipulator", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="zaberManipulator")]
        public ZaberManipulator ZaberManipulator
        {
            get
            {
                return _zaberManipulator;
            }
            set
            {
                _zaberManipulator = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("networking")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="networking")]
        public Networking Networking
        {
            get
            {
                return _networking;
            }
            set
            {
                _networking = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("operation")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="operation")]
        public Operation Operation
        {
            get
            {
                return _operation;
            }
            set
            {
                _operation = value;
            }
        }
    
        public System.IObservable<BciNoMovementRig> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new BciNoMovementRig
                {
                    DescribedBy = _describedBy,
                    Schema_version = _schema_version,
                    HarpBehaviorBoard = _harpBehaviorBoard,
                    HarpLoadCellsBoard = _harpLoadCellsBoard,
                    HarpTimestampGeneratorGen3 = _harpTimestampGeneratorGen3,
                    Camera0 = _camera0,
                    Camera1 = _camera1,
                    ZaberManipulator = _zaberManipulator,
                    Networking = _networking,
                    Operation = _operation
                }));
        }
    }


    /// <summary>
    /// Serializes a sequence of data model objects into JSON strings.
    /// </summary>
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    [System.ComponentModel.DescriptionAttribute("Serializes a sequence of data model objects into JSON strings.")]
    public partial class SerializeToJson
    {
    
        private System.IObservable<string> Process<T>(System.IObservable<T> source)
        {
            return System.Reactive.Linq.Observable.Select(source, value => Newtonsoft.Json.JsonConvert.SerializeObject(value));
        }

        public System.IObservable<string> Process(System.IObservable<HarpBoard> source)
        {
            return Process<HarpBoard>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Networking> source)
        {
            return Process<Networking>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Operation> source)
        {
            return Process<Operation>(source);
        }

        public System.IObservable<string> Process(System.IObservable<SpinnakerCamera> source)
        {
            return Process<SpinnakerCamera>(source);
        }

        public System.IObservable<string> Process(System.IObservable<ZaberAxis> source)
        {
            return Process<ZaberAxis>(source);
        }

        public System.IObservable<string> Process(System.IObservable<ZaberGenericCommand> source)
        {
            return Process<ZaberGenericCommand>(source);
        }

        public System.IObservable<string> Process(System.IObservable<ZaberManipulator> source)
        {
            return Process<ZaberManipulator>(source);
        }

        public System.IObservable<string> Process(System.IObservable<ZmqConnection> source)
        {
            return Process<ZmqConnection>(source);
        }

        public System.IObservable<string> Process(System.IObservable<BciNoMovementRig> source)
        {
            return Process<BciNoMovementRig>(source);
        }
    }


    /// <summary>
    /// Deserializes a sequence of JSON strings into data model objects.
    /// </summary>
    [System.ComponentModel.DefaultPropertyAttribute("Type")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<HarpBoard>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Networking>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Operation>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<SpinnakerCamera>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<ZaberAxis>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<ZaberGenericCommand>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<ZaberManipulator>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<ZmqConnection>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<BciNoMovementRig>))]
    [System.ComponentModel.DescriptionAttribute("Deserializes a sequence of JSON strings into data model objects.")]
    public partial class DeserializeFromJson : Bonsai.Expressions.SingleArgumentExpressionBuilder
    {
    
        public DeserializeFromJson()
        {
            Type = new Bonsai.Expressions.TypeMapping<BciNoMovementRig>();
        }

        public Bonsai.Expressions.TypeMapping Type { get; set; }

        public override System.Linq.Expressions.Expression Build(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments)
        {
            var typeMapping = (Bonsai.Expressions.TypeMapping)Type;
            var returnType = typeMapping.GetType().GetGenericArguments()[0];
            return System.Linq.Expressions.Expression.Call(
                typeof(DeserializeFromJson),
                "Process",
                new System.Type[] { returnType },
                System.Linq.Enumerable.Single(arguments));
        }

        private static System.IObservable<T> Process<T>(System.IObservable<string> source)
        {
            return System.Reactive.Linq.Observable.Select(source, value => Newtonsoft.Json.JsonConvert.DeserializeObject<T>(value));
        }
    }


    /// <summary>
    /// Serializes a sequence of data model objects into YAML strings.
    /// </summary>
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    [System.ComponentModel.DescriptionAttribute("Serializes a sequence of data model objects into YAML strings.")]
    public partial class SerializeToYaml
    {
    
        private System.IObservable<string> Process<T>(System.IObservable<T> source)
        {
            return System.Reactive.Linq.Observable.Defer(() =>
            {
                var serializer = new YamlDotNet.Serialization.SerializerBuilder().Build();
                return System.Reactive.Linq.Observable.Select(source, value => serializer.Serialize(value)); 
            });
        }

        public System.IObservable<string> Process(System.IObservable<HarpBoard> source)
        {
            return Process<HarpBoard>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Networking> source)
        {
            return Process<Networking>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Operation> source)
        {
            return Process<Operation>(source);
        }

        public System.IObservable<string> Process(System.IObservable<SpinnakerCamera> source)
        {
            return Process<SpinnakerCamera>(source);
        }

        public System.IObservable<string> Process(System.IObservable<ZaberAxis> source)
        {
            return Process<ZaberAxis>(source);
        }

        public System.IObservable<string> Process(System.IObservable<ZaberGenericCommand> source)
        {
            return Process<ZaberGenericCommand>(source);
        }

        public System.IObservable<string> Process(System.IObservable<ZaberManipulator> source)
        {
            return Process<ZaberManipulator>(source);
        }

        public System.IObservable<string> Process(System.IObservable<ZmqConnection> source)
        {
            return Process<ZmqConnection>(source);
        }

        public System.IObservable<string> Process(System.IObservable<BciNoMovementRig> source)
        {
            return Process<BciNoMovementRig>(source);
        }
    }


    /// <summary>
    /// Deserializes a sequence of YAML strings into data model objects.
    /// </summary>
    [System.ComponentModel.DefaultPropertyAttribute("Type")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<HarpBoard>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Networking>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Operation>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<SpinnakerCamera>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<ZaberAxis>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<ZaberGenericCommand>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<ZaberManipulator>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<ZmqConnection>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<BciNoMovementRig>))]
    [System.ComponentModel.DescriptionAttribute("Deserializes a sequence of YAML strings into data model objects.")]
    public partial class DeserializeFromYaml : Bonsai.Expressions.SingleArgumentExpressionBuilder
    {
    
        public DeserializeFromYaml()
        {
            Type = new Bonsai.Expressions.TypeMapping<BciNoMovementRig>();
        }

        public Bonsai.Expressions.TypeMapping Type { get; set; }

        public override System.Linq.Expressions.Expression Build(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments)
        {
            var typeMapping = (Bonsai.Expressions.TypeMapping)Type;
            var returnType = typeMapping.GetType().GetGenericArguments()[0];
            return System.Linq.Expressions.Expression.Call(
                typeof(DeserializeFromYaml),
                "Process",
                new System.Type[] { returnType },
                System.Linq.Enumerable.Single(arguments));
        }

        private static System.IObservable<T> Process<T>(System.IObservable<string> source)
        {
            return System.Reactive.Linq.Observable.Defer(() =>
            {
                var serializer = new YamlDotNet.Serialization.DeserializerBuilder().Build();
                return System.Reactive.Linq.Observable.Select(source, value =>
                {
                    var reader = new System.IO.StringReader(value);
                    var parser = new YamlDotNet.Core.MergingParser(new YamlDotNet.Core.Parser(reader));
                    return serializer.Deserialize<T>(parser);
                });
            });
        }
    }
}