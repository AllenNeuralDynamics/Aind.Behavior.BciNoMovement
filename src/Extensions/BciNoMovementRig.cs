//----------------------
// <auto-generated>
//     Generated using the NJsonSchema v10.9.0.0 (Newtonsoft.Json v9.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------


namespace BciNoMovementDataSchema.Rig
{
    #pragma warning disable // Disable all warnings

    /// <summary>
    /// Axis of the manipulator controlling the spout.
    /// </summary>
    public enum SpoutAxis
    {
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="X")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="X")]
        X = 0,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="Y")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="Y")]
        Y = 1,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="Z")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="Z")]
        Z = 2,
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class ZaberGenericCommand
    {
    
        private string _command;
    
        private SpoutAxis? _axis;
    
        private int? _device;
    
        /// <summary>
        /// The command to send to the Zaber device.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("command", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="command")]
        [System.ComponentModel.DescriptionAttribute("The command to send to the Zaber device.")]
        public string Command
        {
            get
            {
                return _command;
            }
            set
            {
                _command = value;
            }
        }
    
        /// <summary>
        /// The axis to send the command to.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("axis")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="axis")]
        [System.ComponentModel.DescriptionAttribute("The axis to send the command to.")]
        public SpoutAxis? Axis
        {
            get
            {
                return _axis;
            }
            set
            {
                _axis = value;
            }
        }
    
        /// <summary>
        /// The timeout in seconds for the command.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("device")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="device")]
        [System.ComponentModel.DescriptionAttribute("The timeout in seconds for the command.")]
        public int? Device
        {
            get
            {
                return _device;
            }
            set
            {
                _device = value;
            }
        }
    
        public System.IObservable<ZaberGenericCommand> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new ZaberGenericCommand
                {
                    Command = _command,
                    Axis = _axis,
                    Device = _device
                }));
        }
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class HarpBoard
    {
    
        private HarpBoardDeviceType _deviceType;
    
        private string _portName;
    
        private string _serialNumber;
    
        private string _deviceName;
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("deviceType", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="deviceType")]
        public HarpBoardDeviceType DeviceType
        {
            get
            {
                return _deviceType;
            }
            set
            {
                _deviceType = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("portName", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="portName")]
        public string PortName
        {
            get
            {
                return _portName;
            }
            set
            {
                _portName = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("serialNumber")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="serialNumber")]
        public string SerialNumber
        {
            get
            {
                return _serialNumber;
            }
            set
            {
                _serialNumber = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("deviceName")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="deviceName")]
        public string DeviceName
        {
            get
            {
                return _deviceName;
            }
            set
            {
                _deviceName = value;
            }
        }
    
        public System.IObservable<HarpBoard> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new HarpBoard
                {
                    DeviceType = _deviceType,
                    PortName = _portName,
                    SerialNumber = _serialNumber,
                    DeviceName = _deviceName
                }));
        }
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class SpinnakerCamera
    {
    
        private int _binning = 1;
    
        private SpinnakerCameraColorProcessing _colorProcessing = BciNoMovementDataSchema.Rig.SpinnakerCameraColorProcessing.Default;
    
        private int _exposure = 1000;
    
        private int _frameRate = 30;
    
        private double _gain = 0D;
    
        private string _serialNumber;
    
        [Newtonsoft.Json.JsonPropertyAttribute("binning")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="binning")]
        public int Binning
        {
            get
            {
                return _binning;
            }
            set
            {
                _binning = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("colorProcessing")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="colorProcessing")]
        public SpinnakerCameraColorProcessing ColorProcessing
        {
            get
            {
                return _colorProcessing;
            }
            set
            {
                _colorProcessing = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("exposure")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="exposure")]
        public int Exposure
        {
            get
            {
                return _exposure;
            }
            set
            {
                _exposure = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("frameRate")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="frameRate")]
        public int FrameRate
        {
            get
            {
                return _frameRate;
            }
            set
            {
                _frameRate = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("gain")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="gain")]
        public double Gain
        {
            get
            {
                return _gain;
            }
            set
            {
                _gain = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("serialNumber", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="serialNumber")]
        public string SerialNumber
        {
            get
            {
                return _serialNumber;
            }
            set
            {
                _serialNumber = value;
            }
        }
    
        public System.IObservable<SpinnakerCamera> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new SpinnakerCamera
                {
                    Binning = _binning,
                    ColorProcessing = _colorProcessing,
                    Exposure = _exposure,
                    FrameRate = _frameRate,
                    Gain = _gain,
                    SerialNumber = _serialNumber
                }));
        }
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class SerialDevice
    {
    
        private string _portName = "COM1";
    
        private string _deviceName;
    
        private int _baudRate = 115200;
    
        [Newtonsoft.Json.JsonPropertyAttribute("portName", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="portName")]
        public string PortName
        {
            get
            {
                return _portName;
            }
            set
            {
                _portName = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("deviceName", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="deviceName")]
        public string DeviceName
        {
            get
            {
                return _deviceName;
            }
            set
            {
                _deviceName = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("baudRate")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="baudRate")]
        public int BaudRate
        {
            get
            {
                return _baudRate;
            }
            set
            {
                _baudRate = value;
            }
        }
    
        public System.IObservable<SerialDevice> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new SerialDevice
                {
                    PortName = _portName,
                    DeviceName = _deviceName,
                    BaudRate = _baudRate
                }));
        }
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class BciNoMovementRig
    {
    
        private HarpBoard _harpBehaviorBoard = new HarpBoard();
    
        private HarpBoard _harpLoadCellsBoard = new HarpBoard();
    
        private HarpBoard _harpTimestampGeneratorGen3 = new HarpBoard();
    
        private SpinnakerCamera _camera0 = new SpinnakerCamera();
    
        private SpinnakerCamera _camera1;
    
        private ZaberManipulator _zaberManipulator = new ZaberManipulator();
    
        private Networking _networking = new Networking();
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("harpBehaviorBoard", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="harpBehaviorBoard")]
        public HarpBoard HarpBehaviorBoard
        {
            get
            {
                return _harpBehaviorBoard;
            }
            set
            {
                _harpBehaviorBoard = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("harpLoadCellsBoard", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="harpLoadCellsBoard")]
        public HarpBoard HarpLoadCellsBoard
        {
            get
            {
                return _harpLoadCellsBoard;
            }
            set
            {
                _harpLoadCellsBoard = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("harpTimestampGeneratorGen3", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="harpTimestampGeneratorGen3")]
        public HarpBoard HarpTimestampGeneratorGen3
        {
            get
            {
                return _harpTimestampGeneratorGen3;
            }
            set
            {
                _harpTimestampGeneratorGen3 = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("camera0", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="camera0")]
        public SpinnakerCamera Camera0
        {
            get
            {
                return _camera0;
            }
            set
            {
                _camera0 = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("camera1")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="camera1")]
        public SpinnakerCamera Camera1
        {
            get
            {
                return _camera1;
            }
            set
            {
                _camera1 = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("zaberManipulator", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="zaberManipulator")]
        public ZaberManipulator ZaberManipulator
        {
            get
            {
                return _zaberManipulator;
            }
            set
            {
                _zaberManipulator = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("networking", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="networking")]
        public Networking Networking
        {
            get
            {
                return _networking;
            }
            set
            {
                _networking = value;
            }
        }
    
        public System.IObservable<BciNoMovementRig> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new BciNoMovementRig
                {
                    HarpBehaviorBoard = _harpBehaviorBoard,
                    HarpLoadCellsBoard = _harpLoadCellsBoard,
                    HarpTimestampGeneratorGen3 = _harpTimestampGeneratorGen3,
                    Camera0 = _camera0,
                    Camera1 = _camera1,
                    ZaberManipulator = _zaberManipulator,
                    Networking = _networking
                }));
        }
    }


    public enum HarpBoardDeviceType
    {
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="custom")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="custom")]
        Custom = 0,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="behavior")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="behavior")]
        Behavior = 1,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="clockSynchronizer")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="clockSynchronizer")]
        ClockSynchronizer = 2,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="timestampGeneratorGen3")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="timestampGeneratorGen3")]
        TimestampGeneratorGen3 = 3,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="loadCells")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="loadCells")]
        LoadCells = 4,
    }


    public enum SpinnakerCameraColorProcessing
    {
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="Default")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="Default")]
        Default = 0,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="NoColorProcessing")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="NoColorProcessing")]
        NoColorProcessing = 1,
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class ZaberManipulator
    {
    
        private SerialDevice _communication;
    
        private Operation _operation;
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("communication")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="communication")]
        public SerialDevice Communication
        {
            get
            {
                return _communication;
            }
            set
            {
                _communication = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("operation")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="operation")]
        public Operation Operation
        {
            get
            {
                return _operation;
            }
            set
            {
                _operation = value;
            }
        }
    
        public System.IObservable<ZaberManipulator> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new ZaberManipulator
                {
                    Communication = _communication,
                    Operation = _operation
                }));
        }
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Networking
    {
    
        private ZmqPublisher _zmqPublisher;
    
        private ZmqSubscriber _zmqSubscriber;
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("zmqPublisher")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="zmqPublisher")]
        public ZmqPublisher ZmqPublisher
        {
            get
            {
                return _zmqPublisher;
            }
            set
            {
                _zmqPublisher = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("zmqSubscriber")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="zmqSubscriber")]
        public ZmqSubscriber ZmqSubscriber
        {
            get
            {
                return _zmqSubscriber;
            }
            set
            {
                _zmqSubscriber = value;
            }
        }
    
        public System.IObservable<Networking> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new Networking
                {
                    ZmqPublisher = _zmqPublisher,
                    ZmqSubscriber = _zmqSubscriber
                }));
        }
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Operation
    {
    
        private System.Collections.Generic.List<ZaberGenericCommand> _genericCommands = new System.Collections.Generic.List<ZaberGenericCommand>();
    
        private SpoutAxis _spoutAxis;
    
        private double _maxSpeed = 12D;
    
        private double _acceleration = 1299.63D;
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("genericCommands")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="genericCommands")]
        public System.Collections.Generic.List<ZaberGenericCommand> GenericCommands
        {
            get
            {
                return _genericCommands;
            }
            set
            {
                _genericCommands = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("spoutAxis")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="spoutAxis")]
        public SpoutAxis SpoutAxis
        {
            get
            {
                return _spoutAxis;
            }
            set
            {
                _spoutAxis = value;
            }
        }
    
        /// <summary>
        /// Maximum speed of the manipulator in mm/s
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("maxSpeed")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="maxSpeed")]
        [System.ComponentModel.DescriptionAttribute("Maximum speed of the manipulator in mm/s")]
        public double MaxSpeed
        {
            get
            {
                return _maxSpeed;
            }
            set
            {
                _maxSpeed = value;
            }
        }
    
        /// <summary>
        /// Acceleration of the manipulator in mm/s^2
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("acceleration")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="acceleration")]
        [System.ComponentModel.DescriptionAttribute("Acceleration of the manipulator in mm/s^2")]
        public double Acceleration
        {
            get
            {
                return _acceleration;
            }
            set
            {
                _acceleration = value;
            }
        }
    
        public System.IObservable<Operation> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new Operation
                {
                    GenericCommands = _genericCommands,
                    SpoutAxis = _spoutAxis,
                    MaxSpeed = _maxSpeed,
                    Acceleration = _acceleration
                }));
        }
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class ZmqPublisher
    {
    
        private string _connectionString = "@tcp://localhost:5556";
    
        private string _topic = "bci-no-movement";
    
        [Newtonsoft.Json.JsonPropertyAttribute("connectionString")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="connectionString")]
        public string ConnectionString
        {
            get
            {
                return _connectionString;
            }
            set
            {
                _connectionString = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("topic")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="topic")]
        public string Topic
        {
            get
            {
                return _topic;
            }
            set
            {
                _topic = value;
            }
        }
    
        public System.IObservable<ZmqPublisher> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new ZmqPublisher
                {
                    ConnectionString = _connectionString,
                    Topic = _topic
                }));
        }
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class ZmqSubscriber
    {
    
        private string _connectionString = "tcp://localhost:5557";
    
        private string _topic = "bci-no-movement";
    
        [Newtonsoft.Json.JsonPropertyAttribute("connectionString")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="connectionString")]
        public string ConnectionString
        {
            get
            {
                return _connectionString;
            }
            set
            {
                _connectionString = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("topic")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="topic")]
        public string Topic
        {
            get
            {
                return _topic;
            }
            set
            {
                _topic = value;
            }
        }
    
        public System.IObservable<ZmqSubscriber> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new ZmqSubscriber
                {
                    ConnectionString = _connectionString,
                    Topic = _topic
                }));
        }
    }


    /// <summary>
    /// Serializes a sequence of data model objects into JSON strings.
    /// </summary>
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    [System.ComponentModel.DescriptionAttribute("Serializes a sequence of data model objects into JSON strings.")]
    public partial class SerializeToJson
    {
    
        private System.IObservable<string> Process<T>(System.IObservable<T> source)
        {
            return System.Reactive.Linq.Observable.Select(source, value => Newtonsoft.Json.JsonConvert.SerializeObject(value));
        }

        public System.IObservable<string> Process(System.IObservable<ZaberGenericCommand> source)
        {
            return Process<ZaberGenericCommand>(source);
        }

        public System.IObservable<string> Process(System.IObservable<HarpBoard> source)
        {
            return Process<HarpBoard>(source);
        }

        public System.IObservable<string> Process(System.IObservable<SpinnakerCamera> source)
        {
            return Process<SpinnakerCamera>(source);
        }

        public System.IObservable<string> Process(System.IObservable<SerialDevice> source)
        {
            return Process<SerialDevice>(source);
        }

        public System.IObservable<string> Process(System.IObservable<BciNoMovementRig> source)
        {
            return Process<BciNoMovementRig>(source);
        }

        public System.IObservable<string> Process(System.IObservable<ZaberManipulator> source)
        {
            return Process<ZaberManipulator>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Networking> source)
        {
            return Process<Networking>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Operation> source)
        {
            return Process<Operation>(source);
        }

        public System.IObservable<string> Process(System.IObservable<ZmqPublisher> source)
        {
            return Process<ZmqPublisher>(source);
        }

        public System.IObservable<string> Process(System.IObservable<ZmqSubscriber> source)
        {
            return Process<ZmqSubscriber>(source);
        }
    }


    /// <summary>
    /// Deserializes a sequence of JSON strings into data model objects.
    /// </summary>
    [System.ComponentModel.DefaultPropertyAttribute("Type")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<ZaberGenericCommand>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<HarpBoard>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<SpinnakerCamera>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<SerialDevice>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<BciNoMovementRig>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<ZaberManipulator>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Networking>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Operation>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<ZmqPublisher>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<ZmqSubscriber>))]
    [System.ComponentModel.DescriptionAttribute("Deserializes a sequence of JSON strings into data model objects.")]
    public partial class DeserializeFromJson : Bonsai.Expressions.SingleArgumentExpressionBuilder
    {
    
        public DeserializeFromJson()
        {
            Type = new Bonsai.Expressions.TypeMapping<BciNoMovementRig>();
        }

        public Bonsai.Expressions.TypeMapping Type { get; set; }

        public override System.Linq.Expressions.Expression Build(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments)
        {
            var typeMapping = (Bonsai.Expressions.TypeMapping)Type;
            var returnType = typeMapping.GetType().GetGenericArguments()[0];
            return System.Linq.Expressions.Expression.Call(
                typeof(DeserializeFromJson),
                "Process",
                new System.Type[] { returnType },
                System.Linq.Enumerable.Single(arguments));
        }

        private static System.IObservable<T> Process<T>(System.IObservable<string> source)
        {
            return System.Reactive.Linq.Observable.Select(source, value => Newtonsoft.Json.JsonConvert.DeserializeObject<T>(value));
        }
    }


    /// <summary>
    /// Serializes a sequence of data model objects into YAML strings.
    /// </summary>
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    [System.ComponentModel.DescriptionAttribute("Serializes a sequence of data model objects into YAML strings.")]
    public partial class SerializeToYaml
    {
    
        private System.IObservable<string> Process<T>(System.IObservable<T> source)
        {
            return System.Reactive.Linq.Observable.Defer(() =>
            {
                var serializer = new YamlDotNet.Serialization.SerializerBuilder().Build();
                return System.Reactive.Linq.Observable.Select(source, value => serializer.Serialize(value)); 
            });
        }

        public System.IObservable<string> Process(System.IObservable<ZaberGenericCommand> source)
        {
            return Process<ZaberGenericCommand>(source);
        }

        public System.IObservable<string> Process(System.IObservable<HarpBoard> source)
        {
            return Process<HarpBoard>(source);
        }

        public System.IObservable<string> Process(System.IObservable<SpinnakerCamera> source)
        {
            return Process<SpinnakerCamera>(source);
        }

        public System.IObservable<string> Process(System.IObservable<SerialDevice> source)
        {
            return Process<SerialDevice>(source);
        }

        public System.IObservable<string> Process(System.IObservable<BciNoMovementRig> source)
        {
            return Process<BciNoMovementRig>(source);
        }

        public System.IObservable<string> Process(System.IObservable<ZaberManipulator> source)
        {
            return Process<ZaberManipulator>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Networking> source)
        {
            return Process<Networking>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Operation> source)
        {
            return Process<Operation>(source);
        }

        public System.IObservable<string> Process(System.IObservable<ZmqPublisher> source)
        {
            return Process<ZmqPublisher>(source);
        }

        public System.IObservable<string> Process(System.IObservable<ZmqSubscriber> source)
        {
            return Process<ZmqSubscriber>(source);
        }
    }


    /// <summary>
    /// Deserializes a sequence of YAML strings into data model objects.
    /// </summary>
    [System.ComponentModel.DefaultPropertyAttribute("Type")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<ZaberGenericCommand>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<HarpBoard>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<SpinnakerCamera>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<SerialDevice>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<BciNoMovementRig>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<ZaberManipulator>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Networking>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Operation>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<ZmqPublisher>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<ZmqSubscriber>))]
    [System.ComponentModel.DescriptionAttribute("Deserializes a sequence of YAML strings into data model objects.")]
    public partial class DeserializeFromYaml : Bonsai.Expressions.SingleArgumentExpressionBuilder
    {
    
        public DeserializeFromYaml()
        {
            Type = new Bonsai.Expressions.TypeMapping<BciNoMovementRig>();
        }

        public Bonsai.Expressions.TypeMapping Type { get; set; }

        public override System.Linq.Expressions.Expression Build(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments)
        {
            var typeMapping = (Bonsai.Expressions.TypeMapping)Type;
            var returnType = typeMapping.GetType().GetGenericArguments()[0];
            return System.Linq.Expressions.Expression.Call(
                typeof(DeserializeFromYaml),
                "Process",
                new System.Type[] { returnType },
                System.Linq.Enumerable.Single(arguments));
        }

        private static System.IObservable<T> Process<T>(System.IObservable<string> source)
        {
            return System.Reactive.Linq.Observable.Defer(() =>
            {
                var serializer = new YamlDotNet.Serialization.DeserializerBuilder().Build();
                return System.Reactive.Linq.Observable.Select(source, value =>
                {
                    var reader = new System.IO.StringReader(value);
                    var parser = new YamlDotNet.Core.MergingParser(new YamlDotNet.Core.Parser(reader));
                    return serializer.Deserialize<T>(parser);
                });
            });
        }
    }
}