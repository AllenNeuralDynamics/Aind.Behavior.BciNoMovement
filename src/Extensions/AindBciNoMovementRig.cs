//----------------------
// <auto-generated>
//     Generated using the NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------


namespace BciNoMovementDataSchema.AindBciNoMovementRig
{
    #pragma warning disable // Disable all warnings

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum Axis
    {
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
        _1 = 0,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
        _2 = 1,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
        _3 = 2,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
        _0 = 3,
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class HarpBehavior
    {
    
        private int _whoAmI = 1216;
    
        private string _deviceType = "behavior";
    
        private string _serialNumber;
    
        private string _portName;
    
        private object _additionalSettings;
    
        public HarpBehavior()
        {
        }
    
        protected HarpBehavior(HarpBehavior other)
        {
            _whoAmI = other._whoAmI;
            _deviceType = other._deviceType;
            _serialNumber = other._serialNumber;
            _portName = other._portName;
            _additionalSettings = other._additionalSettings;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("who_am_i")]
        public int WhoAmI
        {
            get
            {
                return _whoAmI;
            }
            set
            {
                _whoAmI = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("device_type")]
        public string DeviceType
        {
            get
            {
                return _deviceType;
            }
            set
            {
                _deviceType = value;
            }
        }
    
        /// <summary>
        /// Device serial number
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("serial_number")]
        [System.ComponentModel.DescriptionAttribute("Device serial number")]
        public string SerialNumber
        {
            get
            {
                return _serialNumber;
            }
            set
            {
                _serialNumber = value;
            }
        }
    
        /// <summary>
        /// Device port name
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("port_name", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Device port name")]
        public string PortName
        {
            get
            {
                return _portName;
            }
            set
            {
                _portName = value;
            }
        }
    
        /// <summary>
        /// Additional settings
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("additional_settings")]
        [System.ComponentModel.DescriptionAttribute("Additional settings")]
        public object AdditionalSettings
        {
            get
            {
                return _additionalSettings;
            }
            set
            {
                _additionalSettings = value;
            }
        }
    
        public System.IObservable<HarpBehavior> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new HarpBehavior(this)));
        }
    
        public System.IObservable<HarpBehavior> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new HarpBehavior(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("who_am_i = " + _whoAmI + ", ");
            stringBuilder.Append("device_type = " + _deviceType + ", ");
            stringBuilder.Append("serial_number = " + _serialNumber + ", ");
            stringBuilder.Append("port_name = " + _portName + ", ");
            stringBuilder.Append("additional_settings = " + _additionalSettings);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class HarpClockSynchronizer
    {
    
        private int _whoAmI = 1152;
    
        private string _deviceType = "clocksynchronizer";
    
        private string _serialNumber;
    
        private string _portName;
    
        private object _additionalSettings;
    
        public HarpClockSynchronizer()
        {
        }
    
        protected HarpClockSynchronizer(HarpClockSynchronizer other)
        {
            _whoAmI = other._whoAmI;
            _deviceType = other._deviceType;
            _serialNumber = other._serialNumber;
            _portName = other._portName;
            _additionalSettings = other._additionalSettings;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("who_am_i")]
        public int WhoAmI
        {
            get
            {
                return _whoAmI;
            }
            set
            {
                _whoAmI = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("device_type")]
        public string DeviceType
        {
            get
            {
                return _deviceType;
            }
            set
            {
                _deviceType = value;
            }
        }
    
        /// <summary>
        /// Device serial number
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("serial_number")]
        [System.ComponentModel.DescriptionAttribute("Device serial number")]
        public string SerialNumber
        {
            get
            {
                return _serialNumber;
            }
            set
            {
                _serialNumber = value;
            }
        }
    
        /// <summary>
        /// Device port name
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("port_name", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Device port name")]
        public string PortName
        {
            get
            {
                return _portName;
            }
            set
            {
                _portName = value;
            }
        }
    
        /// <summary>
        /// Additional settings
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("additional_settings")]
        [System.ComponentModel.DescriptionAttribute("Additional settings")]
        public object AdditionalSettings
        {
            get
            {
                return _additionalSettings;
            }
            set
            {
                _additionalSettings = value;
            }
        }
    
        public System.IObservable<HarpClockSynchronizer> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new HarpClockSynchronizer(this)));
        }
    
        public System.IObservable<HarpClockSynchronizer> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new HarpClockSynchronizer(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("who_am_i = " + _whoAmI + ", ");
            stringBuilder.Append("device_type = " + _deviceType + ", ");
            stringBuilder.Append("serial_number = " + _serialNumber + ", ");
            stringBuilder.Append("port_name = " + _portName + ", ");
            stringBuilder.Append("additional_settings = " + _additionalSettings);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class HarpLoadCells
    {
    
        private int _whoAmI = 1232;
    
        private string _deviceType = "loadcells";
    
        private string _serialNumber;
    
        private string _portName;
    
        private object _additionalSettings;
    
        public HarpLoadCells()
        {
        }
    
        protected HarpLoadCells(HarpLoadCells other)
        {
            _whoAmI = other._whoAmI;
            _deviceType = other._deviceType;
            _serialNumber = other._serialNumber;
            _portName = other._portName;
            _additionalSettings = other._additionalSettings;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("who_am_i")]
        public int WhoAmI
        {
            get
            {
                return _whoAmI;
            }
            set
            {
                _whoAmI = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("device_type")]
        public string DeviceType
        {
            get
            {
                return _deviceType;
            }
            set
            {
                _deviceType = value;
            }
        }
    
        /// <summary>
        /// Device serial number
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("serial_number")]
        [System.ComponentModel.DescriptionAttribute("Device serial number")]
        public string SerialNumber
        {
            get
            {
                return _serialNumber;
            }
            set
            {
                _serialNumber = value;
            }
        }
    
        /// <summary>
        /// Device port name
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("port_name", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Device port name")]
        public string PortName
        {
            get
            {
                return _portName;
            }
            set
            {
                _portName = value;
            }
        }
    
        /// <summary>
        /// Additional settings
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("additional_settings")]
        [System.ComponentModel.DescriptionAttribute("Additional settings")]
        public object AdditionalSettings
        {
            get
            {
                return _additionalSettings;
            }
            set
            {
                _additionalSettings = value;
            }
        }
    
        public System.IObservable<HarpLoadCells> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new HarpLoadCells(this)));
        }
    
        public System.IObservable<HarpLoadCells> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new HarpLoadCells(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("who_am_i = " + _whoAmI + ", ");
            stringBuilder.Append("device_type = " + _deviceType + ", ");
            stringBuilder.Append("serial_number = " + _serialNumber + ", ");
            stringBuilder.Append("port_name = " + _portName + ", ");
            stringBuilder.Append("additional_settings = " + _additionalSettings);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Networking
    {
    
        private ZmqConnection _zmqPublisher;
    
        private ZmqConnection _zmqSubscriber;
    
        public Networking()
        {
        }
    
        protected Networking(Networking other)
        {
            _zmqPublisher = other._zmqPublisher;
            _zmqSubscriber = other._zmqSubscriber;
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("zmq_publisher")]
        public ZmqConnection ZmqPublisher
        {
            get
            {
                return _zmqPublisher;
            }
            set
            {
                _zmqPublisher = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("zmq_subscriber")]
        public ZmqConnection ZmqSubscriber
        {
            get
            {
                return _zmqSubscriber;
            }
            set
            {
                _zmqSubscriber = value;
            }
        }
    
        public System.IObservable<Networking> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Networking(this)));
        }
    
        public System.IObservable<Networking> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Networking(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("zmq_publisher = " + _zmqPublisher + ", ");
            stringBuilder.Append("zmq_subscriber = " + _zmqSubscriber);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Operation
    {
    
        private System.Collections.Generic.List<int> _loadCellOffset = new System.Collections.Generic.List<int>();
    
        private int _loadCellIndex = 0;
    
        public Operation()
        {
        }
    
        protected Operation(Operation other)
        {
            _loadCellOffset = other._loadCellOffset;
            _loadCellIndex = other._loadCellIndex;
        }
    
        /// <summary>
        /// Bias offset of a specific loadcell channel.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("load_cell_offset")]
        [System.ComponentModel.DescriptionAttribute("Bias offset of a specific loadcell channel.")]
        public System.Collections.Generic.List<int> LoadCellOffset
        {
            get
            {
                return _loadCellOffset;
            }
            set
            {
                _loadCellOffset = value;
            }
        }
    
        /// <summary>
        /// Index of the loadcell channel to use.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("load_cell_index")]
        [System.ComponentModel.DescriptionAttribute("Index of the loadcell channel to use.")]
        public int LoadCellIndex
        {
            get
            {
                return _loadCellIndex;
            }
            set
            {
                _loadCellIndex = value;
            }
        }
    
        public System.IObservable<Operation> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Operation(this)));
        }
    
        public System.IObservable<Operation> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Operation(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("load_cell_offset = " + _loadCellOffset + ", ");
            stringBuilder.Append("load_cell_index = " + _loadCellIndex);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class SpinnakerCamera
    {
    
        private string _serialNumber;
    
        private int _binning = 1;
    
        private SpinnakerCameraColorProcessing _colorProcessing = BciNoMovementDataSchema.AindBciNoMovementRig.SpinnakerCameraColorProcessing.Default;
    
        private int _exposure = 1000;
    
        private int _frameRate = 30;
    
        private double _gain = 0D;
    
        public SpinnakerCamera()
        {
        }
    
        protected SpinnakerCamera(SpinnakerCamera other)
        {
            _serialNumber = other._serialNumber;
            _binning = other._binning;
            _colorProcessing = other._colorProcessing;
            _exposure = other._exposure;
            _frameRate = other._frameRate;
            _gain = other._gain;
        }
    
        /// <summary>
        /// Camera serial number
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("serial_number", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Camera serial number")]
        public string SerialNumber
        {
            get
            {
                return _serialNumber;
            }
            set
            {
                _serialNumber = value;
            }
        }
    
        /// <summary>
        /// Binning
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("binning")]
        [System.ComponentModel.DescriptionAttribute("Binning")]
        public int Binning
        {
            get
            {
                return _binning;
            }
            set
            {
                _binning = value;
            }
        }
    
        /// <summary>
        /// Color processing
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("color_processing")]
        [System.ComponentModel.DescriptionAttribute("Color processing")]
        public SpinnakerCameraColorProcessing ColorProcessing
        {
            get
            {
                return _colorProcessing;
            }
            set
            {
                _colorProcessing = value;
            }
        }
    
        /// <summary>
        /// Exposure time
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("exposure")]
        [System.ComponentModel.DescriptionAttribute("Exposure time")]
        public int Exposure
        {
            get
            {
                return _exposure;
            }
            set
            {
                _exposure = value;
            }
        }
    
        /// <summary>
        /// Frame rate
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("frame_rate")]
        [System.ComponentModel.DescriptionAttribute("Frame rate")]
        public int FrameRate
        {
            get
            {
                return _frameRate;
            }
            set
            {
                _frameRate = value;
            }
        }
    
        /// <summary>
        /// Gain
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("gain")]
        [System.ComponentModel.DescriptionAttribute("Gain")]
        public double Gain
        {
            get
            {
                return _gain;
            }
            set
            {
                _gain = value;
            }
        }
    
        public System.IObservable<SpinnakerCamera> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new SpinnakerCamera(this)));
        }
    
        public System.IObservable<SpinnakerCamera> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new SpinnakerCamera(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("serial_number = " + _serialNumber + ", ");
            stringBuilder.Append("binning = " + _binning + ", ");
            stringBuilder.Append("color_processing = " + _colorProcessing + ", ");
            stringBuilder.Append("exposure = " + _exposure + ", ");
            stringBuilder.Append("frame_rate = " + _frameRate + ", ");
            stringBuilder.Append("gain = " + _gain);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class ZaberAxis
    {
    
        private int _deviceIndex;
    
        private int _axisIndex;
    
        public ZaberAxis()
        {
        }
    
        protected ZaberAxis(ZaberAxis other)
        {
            _deviceIndex = other._deviceIndex;
            _axisIndex = other._axisIndex;
        }
    
        /// <summary>
        /// Device number.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("device_index", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Device number.")]
        public int DeviceIndex
        {
            get
            {
                return _deviceIndex;
            }
            set
            {
                _deviceIndex = value;
            }
        }
    
        /// <summary>
        /// Motor to send the instruction to.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("axis_index", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Motor to send the instruction to.")]
        public int AxisIndex
        {
            get
            {
                return _axisIndex;
            }
            set
            {
                _axisIndex = value;
            }
        }
    
        public System.IObservable<ZaberAxis> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new ZaberAxis(this)));
        }
    
        public System.IObservable<ZaberAxis> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new ZaberAxis(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("device_index = " + _deviceIndex + ", ");
            stringBuilder.Append("axis_index = " + _axisIndex);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class ZaberGenericCommand
    {
    
        private string _command;
    
        private int _axis = 0;
    
        private int _device;
    
        public ZaberGenericCommand()
        {
        }
    
        protected ZaberGenericCommand(ZaberGenericCommand other)
        {
            _command = other._command;
            _axis = other._axis;
            _device = other._device;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("command", Required=Newtonsoft.Json.Required.Always)]
        public string Command
        {
            get
            {
                return _command;
            }
            set
            {
                _command = value;
            }
        }
    
        /// <summary>
        /// Motor to send the instruction to.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("axis")]
        [System.ComponentModel.DescriptionAttribute("Motor to send the instruction to.")]
        public int Axis
        {
            get
            {
                return _axis;
            }
            set
            {
                _axis = value;
            }
        }
    
        /// <summary>
        /// Device number.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("device")]
        [System.ComponentModel.DescriptionAttribute("Device number.")]
        public int Device
        {
            get
            {
                return _device;
            }
            set
            {
                _device = value;
            }
        }
    
        public System.IObservable<ZaberGenericCommand> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new ZaberGenericCommand(this)));
        }
    
        public System.IObservable<ZaberGenericCommand> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new ZaberGenericCommand(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("command = " + _command + ", ");
            stringBuilder.Append("axis = " + _axis + ", ");
            stringBuilder.Append("device = " + _device);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class ZaberManipulator
    {
    
        private string _comPort = "COM1";
    
        private System.Collections.Generic.List<ZaberGenericCommand> _genericCommands = new System.Collections.Generic.List<ZaberGenericCommand>();
    
        private Axis _spoutAxis = BciNoMovementDataSchema.AindBciNoMovementRig.Axis._1;
    
        private double _velocity = 10D;
    
        private double _acceleration = 1299.63D;
    
        private ZaberAxis _xAxis = new ZaberAxis();
    
        private ZaberAxis _yAxis = new ZaberAxis();
    
        private ZaberAxis _zAxis = new ZaberAxis();
    
        public ZaberManipulator()
        {
        }
    
        protected ZaberManipulator(ZaberManipulator other)
        {
            _comPort = other._comPort;
            _genericCommands = other._genericCommands;
            _spoutAxis = other._spoutAxis;
            _velocity = other._velocity;
            _acceleration = other._acceleration;
            _xAxis = other._xAxis;
            _yAxis = other._yAxis;
            _zAxis = other._zAxis;
        }
    
        /// <summary>
        /// COM port of the manipulator.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("com_port")]
        [System.ComponentModel.DescriptionAttribute("COM port of the manipulator.")]
        public string ComPort
        {
            get
            {
                return _comPort;
            }
            set
            {
                _comPort = value;
            }
        }
    
        /// <summary>
        /// List of generic commands to send to the manipulator.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("generic_commands")]
        [System.ComponentModel.DescriptionAttribute("List of generic commands to send to the manipulator.")]
        public System.Collections.Generic.List<ZaberGenericCommand> GenericCommands
        {
            get
            {
                return _genericCommands;
            }
            set
            {
                _genericCommands = value;
            }
        }
    
        /// <summary>
        /// Axis of the spout.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("spout_axis")]
        [System.ComponentModel.DescriptionAttribute("Axis of the spout.")]
        public Axis SpoutAxis
        {
            get
            {
                return _spoutAxis;
            }
            set
            {
                _spoutAxis = value;
            }
        }
    
        /// <summary>
        /// Maximum speed of the manipulator.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("velocity")]
        [System.ComponentModel.DescriptionAttribute("Maximum speed of the manipulator.")]
        public double Velocity
        {
            get
            {
                return _velocity;
            }
            set
            {
                _velocity = value;
            }
        }
    
        /// <summary>
        /// Acceleration of the manipulator.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("acceleration")]
        [System.ComponentModel.DescriptionAttribute("Acceleration of the manipulator.")]
        public double Acceleration
        {
            get
            {
                return _acceleration;
            }
            set
            {
                _acceleration = value;
            }
        }
    
        /// <summary>
        /// X-axis mapping.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("x_axis", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("X-axis mapping.")]
        public ZaberAxis XAxis
        {
            get
            {
                return _xAxis;
            }
            set
            {
                _xAxis = value;
            }
        }
    
        /// <summary>
        /// Y-axis mapping.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("y_axis", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Y-axis mapping.")]
        public ZaberAxis YAxis
        {
            get
            {
                return _yAxis;
            }
            set
            {
                _yAxis = value;
            }
        }
    
        /// <summary>
        /// Z-axis mapping.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("z_axis", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Z-axis mapping.")]
        public ZaberAxis ZAxis
        {
            get
            {
                return _zAxis;
            }
            set
            {
                _zAxis = value;
            }
        }
    
        public System.IObservable<ZaberManipulator> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new ZaberManipulator(this)));
        }
    
        public System.IObservable<ZaberManipulator> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new ZaberManipulator(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("com_port = " + _comPort + ", ");
            stringBuilder.Append("generic_commands = " + _genericCommands + ", ");
            stringBuilder.Append("spout_axis = " + _spoutAxis + ", ");
            stringBuilder.Append("velocity = " + _velocity + ", ");
            stringBuilder.Append("acceleration = " + _acceleration + ", ");
            stringBuilder.Append("x_axis = " + _xAxis + ", ");
            stringBuilder.Append("y_axis = " + _yAxis + ", ");
            stringBuilder.Append("z_axis = " + _zAxis);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class ZmqConnection
    {
    
        private string _connectionString = "@tcp://localhost:5556";
    
        private string _topic = "";
    
        public ZmqConnection()
        {
        }
    
        protected ZmqConnection(ZmqConnection other)
        {
            _connectionString = other._connectionString;
            _topic = other._topic;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("connection_string")]
        public string ConnectionString
        {
            get
            {
                return _connectionString;
            }
            set
            {
                _connectionString = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("topic")]
        public string Topic
        {
            get
            {
                return _topic;
            }
            set
            {
                _topic = value;
            }
        }
    
        public System.IObservable<ZmqConnection> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new ZmqConnection(this)));
        }
    
        public System.IObservable<ZmqConnection> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new ZmqConnection(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("connection_string = " + _connectionString + ", ");
            stringBuilder.Append("topic = " + _topic);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class BciNoMovementRig
    {
    
        private string _describedBy;
    
        private string _schemaVersion;
    
        private string _computerName;
    
        private string _rigName;
    
        private HarpBehavior _harpBehavior = new HarpBehavior();
    
        private HarpLoadCells _harpLoadCell = new HarpLoadCells();
    
        private HarpClockSynchronizer _harpClock = new HarpClockSynchronizer();
    
        private SpinnakerCamera _camera0 = new SpinnakerCamera();
    
        private SpinnakerCamera _camera1;
    
        private ZaberManipulator _zaberManipulator = new ZaberManipulator();
    
        private Networking _networking;
    
        private Operation _operation;
    
        public BciNoMovementRig()
        {
        }
    
        protected BciNoMovementRig(BciNoMovementRig other)
        {
            _describedBy = other._describedBy;
            _schemaVersion = other._schemaVersion;
            _computerName = other._computerName;
            _rigName = other._rigName;
            _harpBehavior = other._harpBehavior;
            _harpLoadCell = other._harpLoadCell;
            _harpClock = other._harpClock;
            _camera0 = other._camera0;
            _camera1 = other._camera1;
            _zaberManipulator = other._zaberManipulator;
            _networking = other._networking;
            _operation = other._operation;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("describedBy", Required=Newtonsoft.Json.Required.Always)]
        public string DescribedBy
        {
            get
            {
                return _describedBy;
            }
            set
            {
                _describedBy = value;
            }
        }
    
        /// <summary>
        /// schema version
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("schema_version", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("schema version")]
        public string SchemaVersion
        {
            get
            {
                return _schemaVersion;
            }
            set
            {
                _schemaVersion = value;
            }
        }
    
        /// <summary>
        /// Computer name
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("computer_name")]
        [System.ComponentModel.DescriptionAttribute("Computer name")]
        public string ComputerName
        {
            get
            {
                return _computerName;
            }
            set
            {
                _computerName = value;
            }
        }
    
        /// <summary>
        /// Rig name
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("rig_name", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Rig name")]
        public string RigName
        {
            get
            {
                return _rigName;
            }
            set
            {
                _rigName = value;
            }
        }
    
        /// <summary>
        /// Harp behavior
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("harp_behavior", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Harp behavior")]
        public HarpBehavior HarpBehavior
        {
            get
            {
                return _harpBehavior;
            }
            set
            {
                _harpBehavior = value;
            }
        }
    
        /// <summary>
        /// Harp load cells
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("harp_load_cell", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Harp load cells")]
        public HarpLoadCells HarpLoadCell
        {
            get
            {
                return _harpLoadCell;
            }
            set
            {
                _harpLoadCell = value;
            }
        }
    
        /// <summary>
        /// Harp clock synchronizer
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("harp_clock", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Harp clock synchronizer")]
        public HarpClockSynchronizer HarpClock
        {
            get
            {
                return _harpClock;
            }
            set
            {
                _harpClock = value;
            }
        }
    
        /// <summary>
        /// Required spinnaker camera
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("camera_0", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Required spinnaker camera")]
        public SpinnakerCamera Camera0
        {
            get
            {
                return _camera0;
            }
            set
            {
                _camera0 = value;
            }
        }
    
        /// <summary>
        /// Optional spinnaker camera
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("camera_1")]
        [System.ComponentModel.DescriptionAttribute("Optional spinnaker camera")]
        public SpinnakerCamera Camera1
        {
            get
            {
                return _camera1;
            }
            set
            {
                _camera1 = value;
            }
        }
    
        /// <summary>
        /// Zaber manipulator
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("zaber_manipulator", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Zaber manipulator")]
        public ZaberManipulator ZaberManipulator
        {
            get
            {
                return _zaberManipulator;
            }
            set
            {
                _zaberManipulator = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("networking")]
        public Networking Networking
        {
            get
            {
                return _networking;
            }
            set
            {
                _networking = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("operation")]
        public Operation Operation
        {
            get
            {
                return _operation;
            }
            set
            {
                _operation = value;
            }
        }
    
        public System.IObservable<BciNoMovementRig> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new BciNoMovementRig(this)));
        }
    
        public System.IObservable<BciNoMovementRig> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new BciNoMovementRig(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("describedBy = " + _describedBy + ", ");
            stringBuilder.Append("schema_version = " + _schemaVersion + ", ");
            stringBuilder.Append("computer_name = " + _computerName + ", ");
            stringBuilder.Append("rig_name = " + _rigName + ", ");
            stringBuilder.Append("harp_behavior = " + _harpBehavior + ", ");
            stringBuilder.Append("harp_load_cell = " + _harpLoadCell + ", ");
            stringBuilder.Append("harp_clock = " + _harpClock + ", ");
            stringBuilder.Append("camera_0 = " + _camera0 + ", ");
            stringBuilder.Append("camera_1 = " + _camera1 + ", ");
            stringBuilder.Append("zaber_manipulator = " + _zaberManipulator + ", ");
            stringBuilder.Append("networking = " + _networking + ", ");
            stringBuilder.Append("operation = " + _operation);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum SpinnakerCameraColorProcessing
    {
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="Default")]
        Default = 0,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="NoColorProcessing")]
        NoColorProcessing = 1,
    }


    /// <summary>
    /// Serializes a sequence of data model objects into JSON strings.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Serializes a sequence of data model objects into JSON strings.")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    public partial class SerializeToJson
    {
    
        private System.IObservable<string> Process<T>(System.IObservable<T> source)
        {
            return System.Reactive.Linq.Observable.Select(source, value => Newtonsoft.Json.JsonConvert.SerializeObject(value));
        }

        public System.IObservable<string> Process(System.IObservable<HarpBehavior> source)
        {
            return Process<HarpBehavior>(source);
        }

        public System.IObservable<string> Process(System.IObservable<HarpClockSynchronizer> source)
        {
            return Process<HarpClockSynchronizer>(source);
        }

        public System.IObservable<string> Process(System.IObservable<HarpLoadCells> source)
        {
            return Process<HarpLoadCells>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Networking> source)
        {
            return Process<Networking>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Operation> source)
        {
            return Process<Operation>(source);
        }

        public System.IObservable<string> Process(System.IObservable<SpinnakerCamera> source)
        {
            return Process<SpinnakerCamera>(source);
        }

        public System.IObservable<string> Process(System.IObservable<ZaberAxis> source)
        {
            return Process<ZaberAxis>(source);
        }

        public System.IObservable<string> Process(System.IObservable<ZaberGenericCommand> source)
        {
            return Process<ZaberGenericCommand>(source);
        }

        public System.IObservable<string> Process(System.IObservable<ZaberManipulator> source)
        {
            return Process<ZaberManipulator>(source);
        }

        public System.IObservable<string> Process(System.IObservable<ZmqConnection> source)
        {
            return Process<ZmqConnection>(source);
        }

        public System.IObservable<string> Process(System.IObservable<BciNoMovementRig> source)
        {
            return Process<BciNoMovementRig>(source);
        }
    }


    /// <summary>
    /// Deserializes a sequence of JSON strings into data model objects.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Deserializes a sequence of JSON strings into data model objects.")]
    [System.ComponentModel.DefaultPropertyAttribute("Type")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<HarpBehavior>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<HarpClockSynchronizer>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<HarpLoadCells>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Networking>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Operation>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<SpinnakerCamera>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<ZaberAxis>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<ZaberGenericCommand>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<ZaberManipulator>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<ZmqConnection>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<BciNoMovementRig>))]
    public partial class DeserializeFromJson : Bonsai.Expressions.SingleArgumentExpressionBuilder
    {
    
        public DeserializeFromJson()
        {
            Type = new Bonsai.Expressions.TypeMapping<BciNoMovementRig>();
        }

        public Bonsai.Expressions.TypeMapping Type { get; set; }

        public override System.Linq.Expressions.Expression Build(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments)
        {
            var typeMapping = (Bonsai.Expressions.TypeMapping)Type;
            var returnType = typeMapping.GetType().GetGenericArguments()[0];
            return System.Linq.Expressions.Expression.Call(
                typeof(DeserializeFromJson),
                "Process",
                new System.Type[] { returnType },
                System.Linq.Enumerable.Single(arguments));
        }

        private static System.IObservable<T> Process<T>(System.IObservable<string> source)
        {
            return System.Reactive.Linq.Observable.Select(source, value => Newtonsoft.Json.JsonConvert.DeserializeObject<T>(value));
        }
    }
}